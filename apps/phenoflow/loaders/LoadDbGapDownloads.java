package loaders;

import java.io.File;
import java.io.FilenameFilter;
import java.util.ArrayList;
import java.util.List;

import org.molgenis.MolgenisOptions;
import org.molgenis.framework.db.Database;
import org.molgenis.framework.db.Database.DatabaseAction;
import org.molgenis.util.SimpleTuple;

import app.CsvImport;
import app.DatabaseFactory;

public class LoadDbGapDownloads {
	public static void main(String[] args) throws Exception {

		Database db = DatabaseFactory.create(new MolgenisOptions(
				"apps/phenoflow/phenoflow.properties"));

		loadDbGaPData(db);
	}

	public static void loadDbGaPData(Database db) throws Exception {
		// it is assumed that DbGapToPheno has put its results here
		// This will need updating if run on a different machine
		// File rootDir = new File("D:\\Data\\dbgap");
		File rootDir = new File(
				"C:/Users/Tomasz/pheno_workspace/pheno_data/dbgap/");

		for (String investigationDir : rootDir.list(new FilenameFilter() {

			@Override
			public boolean accept(File arg0, String arg1) {
				return arg0.isDirectory() & arg1.startsWith("phs");
			}
		})) {
			System.out.println("Loading " + investigationDir);

			// need to preload measurements first, otherwise protocol
			// will complain it's missing them due to incorrect
			// autogenerated order
			List<String> list = new ArrayList<String>();
			list.add("investigation");
			list.add("ontologyterm");
			list.add("measurement");

			CsvImport.importAll(new File(rootDir.getAbsolutePath() + "\\"
					+ investigationDir), db, new SimpleTuple(), list,
					DatabaseAction.ADD_IGNORE_EXISTING, "");
			// measurements already in, proceed loading a complete set
			CsvImport.importAll(new File(rootDir.getAbsolutePath() + "\\"
					+ investigationDir), db, new SimpleTuple(), null,
					DatabaseAction.ADD_IGNORE_EXISTING, "");
		}

	}
}
