<molgenis name="org.molgenis">
	<module name="observ">
		<description>Pheno is an generic version of XGAP developed in close
			collaboration within GEN2PHEN, EBI, UMC Groningen, U Groningen, FIMM,
			U Leicester. Todo: add docs again from pheno model. The pheno core
			needs to be preserved! Add changelog special section.
		</description>

		<entity name="ObservationTarget" implements="StudyElement">
			<!-- target has: name, identifier, description -->
			<description> An ObservationTarget class defines the subjects of
				observation. For instance: individual 1 from Investigation x. The
				ObservationTarget class maps to XGAP:Subject, METABASE:Patient and
				maps to Page:Abstract_Observation_Target. The name of
				observationTargets is unique.
			</description>
		</entity>


		<entity name="Panel" extends="ObservationTarget">
			<!-- panel has: name, identifier, description -->
			<description>The Panel class defines groups of individuals based on
				cohort design, case/controls, families, etc. For instance: LifeLines
				cohort, 'middle aged man', 'recombinant mouse inbred Line dba x b6'
				or 'Smith family'. A Panel can act as a single ObservationTarget.
				For example: average height (ObservedValue) in the LifeLines cohort
				(Panel) is 174cm. The Panel class maps to XGAP:Strain and PaGE:Panel
				classes. In METABASE this is assumed there is one panel per study.
			</description>
			<field name="Species" type="xref" nillable="true" xref_entity="Species"
				xref_field="id" xref_label="name"
				description="The species this panel is an instance of/part of/extracted from." />
			<field name="PanelType" type="xref" xref_entity="OntologyTerm"
				nillable="true"
				description="Indicate the type of Panel (example: Sample panel, AssayedPanel, Natural=wild type, Parental=parents of a cross, F1=First generation of cross, RCC=Recombinant congenic, CSS=chromosome substitution)" />
			<field name="NumberOfIndividuals" type="int" />

			<field name="Individuals" type="mref" xref_entity="Individual"
				nillable="true" description="The list of individuals in this panel" />
			<!-- how to deal with accessions in general? -->
			<field name="Version" label="Accession version" nillable="true" />

		</entity>




		<entity name="SelectionCriteria" implements="Nameable,Describable">
			<!-- This should probably be a subclass of protocolApplication? -->
			<description>Create relationships between panels, founder panels,
				such as overlap,
				selection criteria, getting assayed panel from a
				sample panel, etc.
			</description>
			<field name="SourcePanel" type="xref" xref_entity="Panel" />
			<field name="TargetPanel" type="xref" xref_entity="Panel" />
			<field name="NumberOfIndividuals" type="int" />
			<field name="Details" type="text" />
		</entity>

		<!-- break -->

		<entity name="Species" extends="OntologyTerm">
			<description>Ontology terms for species. E.g. Arabidopsis thaliana.
				DISCUSSION: should we avoid subclasses of OntologyTerm and instead
				make a 'tag' filter on terms so we can make pulldowns context
				dependent (e.g. to only show particular subqueries of ontologies).
			</description>
		</entity>
		<entity name="AlternateId" extends="OntologyTerm">
			<description>
				An external identifier for an annotation. For example:
				name='R13H8.1', ontology='ensembl' or name='WBgene00000912',
				ontology='wormbase'.
			</description>
		</entity>
		<entity name="ObservableFeature" implements="StudyElement">
			<description>ObservableFeature defines anything that can be observed
				in a phenotypic Investigation. For instance: Height, Systolic blood
				pressure, Diastolic blood pressure, and Treatment for hypertension
				are observable features. The name of ObservableFeature is unique
				within one Investigation. It is recommended that each
				ObservableFeature is named according to a well-defined ontology term
				which can be specified via ontologyReference. Note that in some
				instances an observableFeature can also be an observationTarget, for
				example in the case of correlation matrices. The ObservableFeature
				class maps to XGAP:Trait, METABASE:Question, FuGE:DimensionElement,
				and PaGE:ObservableFeature. Multi-value features can be grouped by
				Protocol. For instance: high blood pressure can be inferred from
				observations for features systolic and diastolic blood pressure.
				There may be many alternative protocols to measure a feature. See
				Protocol section.
			</description>
			<!-- alternative ids -->
		</entity>

		<entity name="FeatureAnnotations" implements="Identifiable">
			<field name="Feature" type="xref" xref_entity="ObservableFeature" />
			<field name="OntologyTerm" type="xref" xref_entity="OntologyTerm" />
			<field name="ExactMatch" type="bool" />
			<!-- field name="PercentMatch" type="int" />-->
		</entity>

		<entity name="Measurement" extends="ObservableFeature">
			<description>Generic obserable feature to flexibly define a
				measurement
			</description>
			<field name="unit" type="xref" xref_entity="OntologyTerm"
				nillable="true"
				description="(Optional) Reference to the well-defined measurement unit used to observe this feature 
					(if feature is that concrete). E.g. mmHg" />
			<field name="dataType" type="enum" default="string"
				enum_options="[xref,string,nominal,ordinal,date,datetime,int,code,image,decimal,bool,file,log,data,exe]"
				description="(Optional) Reference to the technical data type. E.g. 'int'" />
			<!-- each enum code is defined in MolgenisFieldTypes to automatically 
				generate UI. -->
			<field name="MeasuredAttribute" type="xref" xref_entity="Feature"
				description="analyte/feature &amp; property being tested. E.g. Alzheimes disease state, NaCl concentration" />
			<field name="temporal" type="boolean" default="false"
				description="Whether this feature is time dependent and can have different values when measured 
					on different times (e.g. weight, temporal=true) or generally only measured once (e.g. birth date, 
					temporal=false) " />
			<field name="categories" type="mref" xref_entity="Category"
				nillable="true" description="Translation of codes into categories if applicable" />
			<field name="description" type="text" nillable="true"
				description="(Optional) Rudimentary meta data about the observable feature. Use of ontology 
					terms references to establish unambigious descriptions is recommended" />


			<!-- legacy? -->
			<field name="targettypeAllowedForRelation" type="xref"
				xref_entity="MolgenisEntity"
				description="Subclass of ObservationTarget (Individual, Panel or Location) that
					can be linked to (through the 'relation' field in ObservedValue) when using this 
					Measurement (example: a Measurement 'Species' can only result in ObservedValues 
					that have relations to Panels)"
				nillable="true" label="ObservationTarget type allowed for relation" />
			<field name="panelLabelAllowedForRelation" type="string"
				description="Label that must have been applied to the Panel that
					can be linked to (through the 'relation' field in ObservedValue) when using this 
					Measurement (example: a Measurement 'Species' can only result
					in ObservedValues that have relations to Panels labeled as 'Species')"
				nillable="true" label="Panel label allowed for relation" />
		</entity>

		<entity name="Observation" abstract="true" implements="Identifiable">
			<description>
				Generic model for observations, that is, the observed value on a
				feature-target pair given a protocol. See the 'data' package for all
				kinds of observations. Typically, this data is visualized in a
				spreadsheet format having rows (targets) and columns (features). Use
				cases that need support are:
				<ul>
					<li>Simple text/int values, e.g. 'length in cm (row;
						observableFeature) of individual1 (col; observationTarget) = 179
						(value). These can be stored in subclass 'ObservedValue'
					</li>
					<li>Relationship values, e.g. 'individual 1(row:observationtarget)
						and individual2 (col:observationtarget) = brothers
						(value:observabvlefeature). These can be stored in subclass
						'ObservedValue'
					</li>
					<li>Categoryd values, e.g. 'invidual 1 (row) and feature 'sex'
						(col) = 'male' (value; reference to code or ontology. These can be
						stored in subclass 'ObservedValue'
					</li>
					<li>Data file values, e.g., 'aligned.bam' or 'plink imputed'
						(feature). These can be stored in subclass DataFile
					</li>
					<li>Data matrices, e.g. 'qtlProfile' (feature) for 'bxd panel'
						(target). These can be stored in subclass ObservedData
					</li>
					<li>Measurements are typically grouped by the protocol used,
						therefore a link to protocol application is added.
					</li>
				</ul>
				Implementation wise, the data may or may not be stored in the
				database directly. This is an optimization strategy independent of
				this generic structure. This structure is born out of the merger of
				Pheno-OM, XGAP and MAGE-TAB.<!-- The original documentation: <br /> Generic 
					data structure for aiming the values of a data set as described in Data. 
					Each DataElement describes a cell in a data matrix of rows (from) and columns 
					(to), e.g., in "dataset X" it was measured that geneX (col) relates to geneZ 
					(row). <br /> MAGE-TAB 1.1. has the column ArrayDataMatrix and DerivedArrayDataMatrix. 
					The formats of both types are tab-delimited and the distinction is that an 
					ArrayDataMatrix is raw data and the DerivedArrayDataMatrix is processed data. 
					The DerivedArrayDataMatrix associates a file of a specific format - see the 
					MAGE-TAB specification for details. In order to index the Rows and Columns 
					of DataMatrix we have generated a DimensionElement that allows us to index 
					DimensionRow and DimensionColumn. -->
			</description>
			<field name="protocolApplication" type="xref" xref_entity="ProtocolApplication"
				nillable="true"
				jpaCascade="CascadeType.MERGE, CascadeType.PERSIST, CascadeType.REFRESH"
				description="Reference to the protocol application that was used to produce this observation. For example a particular patient visit or the application of a microarray or the calculation of a QTL model" />
			<field name="Feature" type="xref" xref_entity="ObservableFeature"
				xref_field="id" xref_label="name"
				description="References the ObservableFeature that this observation was made on. For example 'probe123'. Can be ommited for 1D data (i.e., a data list)." />
			<field name="Target" type="xref" xref_entity="ObservableTarget"
				xref_field="id" xref_label="name"
				description="References the ObservationTarget that this feature was made on. For example 'individual1'. In a correlation matrix this could be also 'probe123'." />
		</entity>

		<entity name="ObservedValue" implements="Identifiable,Observation">
			<description>
				Generic storage of values, relationships and optional ontology
				mapping of the value/relation. Values can be atomatic observations,
				e.g., length (feature) of individual 1 (target) = 179cm (value).
				Values can also be relationship values, e.g., extract (feature) of
				sample 1 (target) = derived sample (relation).
				<br />
				Discussion: how to model sample pooling in this model?
				<br />
				More Discussion: do we want to have type specific subclasses? No,
				because you can solve this by casting during querying?
			</description>
			<field nillable="true" name="value" description="The value observed" />
			<!-- field nillable="true" name="relation" type="xref" xref_entity="ObservationElement" 
				description="Reference to other end of the relationship, if any. For example 
				to a 'brother' or from 'sample' to 'derivedSample'." / -->

			<!-- what about valueRank? -->
		</entity>

		<entity name="Individual" extends="ObservationTarget">
			<description> The Individuals class defines human cases that are used
				as observation target. The Individual class maps to XGAP:Individual
				and PaGE:Individual. Note that minimal information like 'sex' can be
				defined as ObservedValue, and that that basic relationships like
				'father' and 'mother' can also be defined via ObservedRelationship,
				using the 'relation' field. Groups of individuals can be defined via
				Panel.
			</description>
			<field name="Mother" type="xref" nillable="true" xref_entity="Individual"
				xref_field="id" xref_label="name" description="Refers to the mother of the individual." />
			<field name="Father" type="xref" nillable="true" xref_entity="Individual"
				xref_field="id" xref_label="name" description="Refers to the father of the individual." />
		</entity>


	</module>

	<!-- study -->

	<module name="gwascentral">
		<entity name="SamplePanel" extends="Panel" implements="StudyElement">
			<field name="CentralIdentifier" label="" type="xref"
				xref_entity="OntologyTerm" nillable="true"
				description="The central GWAS identifier for this panel" />
			<!-- contain all fields of assayedPanel that are not yet in Panel: composition, 
				number of males, number of females, number of probands, number of parents, 
				mode recruitment, diagnosis age range, diagnosis period, sample age range, 
				sampling period, population information, geographis region info, ehtnic info, 
				birht place, admixture, environment, admixyure, source of DNA, DNAsArePooled, 
				DNAsAreWGA -->
		</entity>

		<entity name="AssayedPanel" extends="Panel" implements="StudyElement">
			<!-- contain all fields of assayedPanel that are not yet in Panel: number 
				of male, number of female, number of unknown, number of probans, number of 
				parents -->
			<!-- why is there a studyId in there? -->
		</entity>
	</module>

</molgenis>