<!-- this ant script allows you to run the molgenis generator from the commandline-->
<project default="test">
	<property file="animaldb.properties" />
	<property file="molgenis.test.properties" />
	<property name="molgenis.dir" value="../molgenis" />
	<property name="build.dir" value="build/classes" />
	<property name="testng.report.dir" value="test-output" />
	<property name="war.dir" value="war" />
	<property name="war.name" value="compute.war" />
	<property name="webxml.dir" value="WebContent/WEB-INF/web.xml"/>


	<path id="molgenis.classpath">
		<pathelement location="${build.dir}" />
		<fileset dir="../molgenis/lib">
			<include name="**/*.jar" />
		</fileset>
		<fileset dir="WebContent/WEB-INF/lib">
			<include name="**/*.jar" />
		</fileset>
	</path>

	<taskdef resource="testngtasks" classpathref="molgenis.classpath" />

	<target name="clean">
		<!-- remove and create generated folder  -->
		<delete includeEmptyDirs="true" failonerror="false">
			<fileset dir="${output_src}" />
			<fileset dir="${build.dir}" />
			<fileset dir="${testng.report.dir}" />
		</delete>
		<mkdir dir="${build.dir}" />
		<mkdir dir="${output_src}" />
		<mkdir dir="${testng.report.dir}" />

	</target>

	<target name="generategcc" depends="clean">

		<!-- check if the molgenis project is where it is to be expected, in ../molgenis/ -->
		<condition property="dir.exists">
			<available file="${molgenis.dir}" type="dir" />
		</condition>

		<!-- check if molgenis is compiled into ../molgenis/bin, otherwise compile now -->
		<javac srcdir="${molgenis.dir}/src" destdir="${build.dir}" nowarn="on">
			<classpath refid="molgenis.classpath" />
		</javac>

		<copy todir="${build.dir}">
			<fileset dir="${molgenis.dir}/src" includes="**/*.xml,**/*.properties,**/*.txt,**/*.ico,**/*.js,**/*.css,**/*.jpg,**/*.png,**/*.gif,**/*.ftl" />
		</copy>

		<!-- call the generator -->
		<java classname="org.molgenis.Molgenis" fork="yes" failonerror="true">
			<classpath refid="molgenis.classpath" />
			<arg value="molgenis.test.properties" />
			<!--arg value="handwritten/apps/org/molgenis/animaldb/animaldb.properties" /-->
		</java>

	</target>
	
	<target name="generate" depends="generategcc">

			<!-- check if the molgenis project is where it is to be expected, in ../molgenis/ -->
			<condition property="dir.exists">
				<available file="${molgenis.dir}" type="dir" />
			</condition>

			<!-- check if molgenis is compiled into ../molgenis/bin, otherwise compile now -->
			<javac srcdir="${molgenis.dir}/src" destdir="${build.dir}" nowarn="on">
				<classpath refid="molgenis.classpath" />
			</javac>

			<copy todir="${build.dir}">
				<fileset dir="${molgenis.dir}/src" includes="**/*.xml,**/*.properties,**/*.txt,**/*.ico,**/*.js,**/*.css,**/*.jpg,**/*.png,**/*.gif,**/*.ftl" />
			</copy>

			<!-- call the generator -->
			<java classname="org.molgenis.Molgenis" fork="yes" failonerror="true">
				<classpath refid="molgenis.classpath" />
				<arg value="compute.properties" />
				<!--arg value="handwritten/apps/org/molgenis/animaldb/animaldb.properties" /-->
			</java>

		</target>

	<target name="compile" depends="generate">
		<!-- compile the generated results, use fork to run it with its own memory settings -->
		<javac fork="true" srcdir="${output_src}:${output_hand}:handwritten/webserver" destdir="${build.dir}" nowarn="on" memoryinitialsize="256m"
		       memorymaximumsize="512m">
			<classpath refid="molgenis.classpath" />
		</javac>

		<!-- copy resources like properties files -->
		<copy todir="${build.dir}">
			<fileset dir="${output_src}" includes="**/*.xml,**/*.properties,**/*.txt,**/*.ico" />
			<fileset dir="${output_hand}" includes="**/*.xml,**/*.properties,**/*.txt,**/*.ico" />
			<fileset dir="${output_sql}" includes="**/*.xml,**/*.properties,**/*.txt,**/*.ico" />
		</copy>
	</target>

	<target name="test" depends="compile">
		<!-- run the tests -->
		<testng classpathref="molgenis.classpath" outputDir="${testng.report.dir}" haltOnFailure="true">
			<xmlfileset dir="${build.dir}" includes="testng.xml" />
			<jvmarg value="-ea" />
		</testng>

		<junitreport todir="${testng.report.dir}">
			<fileset dir="${testng.report.dir}">
				<include name="*/*.xml" />
			</fileset>

			<report format="noframes" todir="${testng.report.dir}" />
		</junitreport>

	</target>
	
	<target name="makeWar" depends="test">
				<!-- the ant war task. with all resources in place, create the war file -->
				<war destfile="${war.dir}/${war.name}" webxml="${webxml.dir}">
					<classes dir="${build.dir}">
					      <include name="**/*"/>
					</classes>
					<lib dir="../molgenis/lib">
						<include name="**/*.jar" />
					</lib>
					<lib dir="WebContent/WEB-INF/lib">
						<include name="**/*.jar" />
					</lib>
					<metainf dir="WebContent/META-INF">
					</metainf>
				</war>

			</target>
</project> 