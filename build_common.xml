<!-- this is a 'superclass' ant script with all stuff in common. 
It should be used via 'import' 
plus passing of properties 
'app_properties' (reference properties file) and
'app_src' (listing of the src folders to be included) -->
<project>
	<!-- requires app_name, app_properties properties and app_src path -->
	<fail unless="app_properties">app_properties is not set. Did you use the right build_xyz.xml?</fail>
	<available file="${app_properties}" property="isFileAvail" />
	<fail unless="isFileAvail" message="app_properties file not found: ${app_properties}" />
	<fail unless="app_name">app_name is not set. Did you use the right build_xyz.xml?</fail>

	<!-- static properties shared between all apps-->
	<property file="${app_properties}" />
	<property name="molgenis.dir" value="../molgenis" />
	<property name="build.dir" value="dist/classes" />
	<property name="testng.report.dir" value="dist/test-output" />
	<property name="war.dir" value="dist/war" />
	<property name="war.name" value="${appname}.war" />
	<property name="webxml.dir" value="WebContent/WEB-INF/web.xml" />

	<!-- path to MOLGENIS toolkit -->
	<path id="molgenis.classpath">
		<pathelement location="${build.dir}" />
		<fileset dir="../molgenis/lib">
			<include name="**/*.jar" />
		</fileset>
		<fileset dir="WebContent/WEB-INF/lib">
			<include name="**/*.jar" />
		</fileset>
	</path>

	<!-- path to app src -->


	<taskdef resource="testngtasks" classpathref="molgenis.classpath" />
	<taskdef name="xmltask" classpathref="molgenis.classpath" classname="com.oopsconsultancy.xmltask.ant.XmlTask"/>
	
	
	

	<!-- clean out generated and build folders -->
	<target name="clean">
		<!-- remove and create generated folder  -->
		<delete includeEmptyDirs="true" failonerror="false">
			<fileset dir="${build.dir}" />
			<fileset dir="${testng.report.dir}" />
			<fileset dir="${war.dir}" />
		</delete>
		<mkdir dir="${build.dir}" />
		<mkdir dir="${output_src}" />
		<mkdir dir="${output_sql}" />
		<mkdir dir="${testng.report.dir}" />
		<mkdir dir="${war.dir}" />
	</target>

	<!-- generate based on properties file for this app_properties-->
	<target name="generate" depends="update-eclipse">
		<!-- clean generated folders -->
		<delete includeEmptyDirs="true" failonerror="false">
			<fileset dir="${output_src}" />
			<fileset dir="${output_sql}" />
			<fileset dir="${output_ccp}" />
		</delete>

		<!-- check if the molgenis project is where it is to be expected, in ../molgenis/ -->
		<condition property="dir.exists">
			<available file="${molgenis.dir}" type="dir" />
		</condition>

		<!-- check if molgenis is compiled into ${build.dir}, otherwise compile now -->
		<javac srcdir="${molgenis.dir}/src" destdir="${build.dir}" nowarn="on" debug="on">
			<classpath refid="molgenis.classpath" />
		</javac>

		<!-- copy resources to build dir -->
		<copy todir="${build.dir}"> 
			<fileset dir="${molgenis.dir}/src" includes="**/*.xml,**/*.properties,**/*.txt,**/*.ico,**/*.js,**/*.css,**/*.jpg,**/*.png,**/*.gif,**/*.ftl" />
		</copy>

		<!-- call the generator -->
		<java classname="org.molgenis.Molgenis" fork="yes" failonerror="true">
			<classpath refid="molgenis.classpath" />
			<classpath refid="app.class.path" />
			<arg value="${app_properties}" />
		</java>

		<!-- copy all ftl files from module folders-->
		<!-- concat all elements of app_path together seperated by /**/*, -->
		<pathconvert property="app_path" refid="app.class.path" pathsep="/**/*," dirsep="/">
			<map from="${user.dir}/" to="" />
		</pathconvert>
		<echo message="copying ftl files from: ${app_path}" />
		<fail unless="app_path">app.class.path is not set</fail>
		<copy todir="${build.dir}">
			<!-- watch the traling /**/*.ftl"-->
			<fileset dir="." includes="${app_path}/**/*" excludes="**/*.java"/>
			<!-- cut the two leading directories from path -->
			<mapper type="regexp" from="^[-_a-zA-Z0-9]*/[-_a-zA-Z0-9]*/(.*)" to="\1" />
			<!--cutdirsmapper dirs="2"/-->
		</copy>

		<!-- copy sql and other resources from generate sql -->
		<copy todir="${build.dir}" verbose="true">
			<fileset dir="${output_sql}" includes="**/*.sql" />
			<fileset dir="${output_src}" includes="**/*.xml,**/*.properties,**/*.txt,**/*.ico" />
		</copy>


	</target>

	<target name="compile">

		<pathconvert property="app_src" refid="app.class.path" pathsep=":">
			<map from="${user.dir}/" to="" />
		</pathconvert>
		<fail unless="app_src">app.class.path is not set. Did you use the right build_xyz.xml?</fail>

		<echo message="compile :${output_src}:${app_src}" />

		<!-- compile the generated results, use fork to run it with its own memory settings -->
		<!-- NB: under Windows, forking works only if the javac path is in your PATH variable -->
		<javac fork="true" srcdir="${output_src}:${app_src}" destdir="${build.dir}" nowarn="on" memoryinitialsize="256m" memorymaximumsize="512m" debug="on">
			<classpath refid="molgenis.classpath" />
		</javac>

	</target>

	<target name="test">
		<!-- combine classpaths -->
		<path id="combined.class.path">
			<path refid="molgenis.classpath"/>
			<path refid="app.class.path"/>
			<path location="${output_src}"/>
		</path>
		
		
		<!-- run the tests -->
		<testng classpathref="combined.class.path" outputDir="${testng.report.dir}" haltOnFailure="true">
			<xmlfileset dir="${build.dir}" includes="**/*testng.xml" />
			<jvmarg value="-ea" />
		</testng>

		<!--junitreport todir="${testng.report.dir}">
			<fileset dir="${testng.report.dir}">
				<include name="**/*.xml" />
			</fileset>

			<report format="noframes" todir="${testng.report.dir}" />
		</junitreport-->

	</target>
	<!--
	<target name="javadoc">
		<javadoc access="public" destdir="${dir.javadoc}" author="true" version="true" noindex="false" use="true" classpathref="classpath">
			<fileset dir="handwritten/java" defaultexcludes="yes">
				<include name="**/*.java" />
				<exclude name="org/test/**/*.java" />
			</fileset>
			<fileset dir="generated/java" defaultexcludes="yes">
				<include name="**/*.java" />
				<exclude name="org/test/**/*.java" />
			</fileset>
		</javadoc>
	</target>

	<target name="makeWar" depends="compile">
		 the ant war task. with all resources in place, create the war file 
		<war destfile="${war.dir}/${war.name}" webxml="${webxml.dir}">
			<classes dir="${build.dir}">
				<include name="**/*" />
			</classes>
			<lib dir="../molgenis/lib">
				<include name="**/*.jar" />
			</lib>
			<lib dir="WebContent/WEB-INF/lib">
				<include name="**/*.jar" />
			</lib>
			<metainf dir="WebContent/META-INF">
			</metainf>
		</war>
	</target>
	-->
	
	<target name="update-eclipse">
		
		<pathconvert property="app_xml" refid="app.class.path" pathsep="&quot;/&gt;&lt;classpathentry kind=&quot;src&quot; path=&quot;">
			<map from="${user.dir}/" to="" />
		</pathconvert>
		
		<!-- add generated src as well -->
		<property name="app_xml2" value="&lt;classpathentry kind=&quot;src&quot; path=&quot;${app_xml}&quot;/&gt;"/>
		<property name="app_xml3" value="${app_xml2}&lt;classpathentry kind=&quot;src&quot; path=&quot;${output_sql}&quot;/&gt;&lt;classpathentry kind=&quot;src&quot; path=&quot;${output_src}&quot;/&gt;"/>
		<echo message="eclipse .classpath xml: ${app_xml3}"/>
	
		<xmltask source=".classpath" dest=".classpath" outputter="simple">
			<remove path="classpath/classpathentry[@kind='src' and not(@exported)]"/>
			<insert path="classpath" position="under" xml="${app_xml3}"/>
		</xmltask>
		
	</target>

	<target name="generate-compile" depends="generate,compile"/>
	
	<target name="clean-generate-compile" depends="clean,generate,compile"/>
	
	<target name="clean-generate-compile-test" depends="clean,generate,compile,test"/>
	
	<target name="testcopy">
		<pathconvert property="app_path" refid="app.class.path" pathsep="/**/*," dirsep="/">
			<map from="${user.dir}/" to="" />
		</pathconvert>
		
		<copy todir="${build.dir}">
			<!-- watch the traling /**/*.ftl"-->
			<fileset dir="." includes="${app_path}/**/*" excludes="**/*.java"/>
			<fileset dir="${app_path}/handwritten/java/META-INF"/>
			<!-- cut the two leading directories from path -->
			<mapper type="regexp" from="^[-_a-zA-Z0-9]*/[-_a-zA-Z0-9]*/(.*)" to="\1" />
			<!--cutdirsmapper dirs="2"/-->
		</copy>

		<!-- copy sql and other resources from generate sql -->
		<copy todir="${build.dir}" verbose="true">
			<fileset dir="${output_sql}" includes="**/*.sql" />
			<fileset dir="${output_src}" includes="**/*.xml,**/*.properties,**/*.txt,**/*.ico" />
		</copy>
	</target>
	
</project>